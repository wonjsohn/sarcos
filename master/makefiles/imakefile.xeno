/*****************************************************************************
 This is an Imakefile for GNU make, relying on special imake rules in
 ~sschaal/prog/imake. In order to use imake and make correctly, look
 into the README file in ~sschaal/prog/imake.

 Definition of variables:

 SOURCES  : All source files which are used in this Imakefile. Imake
            will automatically generate dependencies to keep these
            source files up-to-date with repect to included header files.

 HEADERS  : All header to be kept up to data
 OBJECTS  : All object files to be used in certain rules. See SS_Imake.rules
 SRCDIR   : Directory where source files come from (global variable)
 LIBDIR   : Where to install a lib
 HEADERDIR: Where to install header files
 BINDIR   : Where to install executables
 INCLUDES : All include directories

 Stefan Schaal, September 1996

****************************************************************************/
 


INCLUDES               = -I../src \
                         -I../include \
                         -I../math \
			 -I$(MY_INCLUDES) \
			 -I$(SARCOSDTSHOME)/include \
			 -I$(LAB_ROOT)/include/DextArm \
			 -I/usr/X11/include \
                         -I/usr/local/glut/include
CFLAGS                 = $(OPTIMIZE_CC_FLAGS) $(INCLUDES) -D$(MACHTYPE)
SRCDIR                 = ../src
LDFLAGS                = $(LAB_LIBDIR)
LIBDIR                 = $(MYLIBDIR)/$(MACHTYPE)
HEADERDIR              = $(MYINCLUDEPATH)
LIBRARIES              = 
BINDIR                 = .

/* ======================================================================= */		       
/* common objects */
SRCS_COMMON  = \
	SL_user_commands.c \
	SL_user_common.c \
	SL_kinematics.c \
	SL_dynamics.c \
	SL_invDynNE.c \
	SL_invDynArt.c \
	SL_forDynComp.c \
	SL_forDynArt.c

OBJS_COMMON  = \
	SL_user_commands.o \
	SL_user_common.o \
	SL_kinematics.o \
	SL_dynamics.o \
	SL_invDynNE.o \
	SL_invDynArt.o \
	SL_forDynComp.o \
	SL_forDynArt.o

/* ======================================================================= */		       
/* the entry program for the master robot simulation */
SRCS_XMASTER = \
	SL_main.c \
	SL_user_common.c

OBJS_XMASTER = \
	SL_main.o \
	SL_user_common.o


/* the entry program for the actual mastor robot */
SRCS_XRMASTER = \
	SL_rmain.c \
	SL_user_common.c

OBJS_XRMASTER = \
	SL_rmain.o \
	SL_user_common.o

/* ======================================================================= */		       
/* the motor servo modules for simulation */
SRCS_MOTOR = \
	SL_user_motor.c \
	SL_user_sensor_proc_unix.c

OBJS_MOTOR = \
	SL_user_motor.o \
	SL_user_sensor_proc_unix.o


/* the motor servo modules for the actual robot */
SRCS_RMOTOR = \
	SL_user_rmotor.c \
	SL_user_sensor_proc_xeno.c \
	ajc.c \
	ajc_change_register.c \
	ni6259_interface.c

OBJS_RMOTOR = \
	SL_user_rmotor.o \
	SL_user_sensor_proc_xeno.o \
	ajc.o \
	ajc_change_register.o \
	ni6259_interface.o


/* ======================================================================= */		       
/* the vision servo modules for simulation */
SRCS_VISION = \
	SL_user_vision.c 

OBJS_VISION = \
	SL_user_vision.o 


/* the vision servo modules for the actual robot */
SRCS_RVISION = \
	SL_user_rvision.c \
	ni6259_interface.c

OBJS_RVISION = \
	SL_user_rvision.o \
	ni6259_interface.o


/* ======================================================================= */		       
/* the task servo modules for simulation */
SRCS_TASK = \
	SL_user_task.c 

OBJS_TASK = \
	SL_user_task.o 


/* the task servo modules for the actual robot */
SRCS_RTASK = \
	SL_user_rtask.c \
	ni6259_interface.c

OBJS_RTASK = \
	SL_user_rtask.o \
	ni6259_interface.o


/* ======================================================================= */		       

LIBS_XMASTER = -lSLcommon -lutility -lX11 -lm 


SRCS_XPEST = \
	SL_parm_estimate.c $(SRCS_COMMON)

OBJS_XPEST = \
	SL_parm_estimate.o $(OBJS_COMMON)


LIBS_XPEST = -lSLcommon -lutility -lm

SOURCES  = $(SRCS_COMMON) $(SRCS_MOTOR) $(SRCS_VISION) SL_parm_estimate.c SL_user_simulation.c SL_user_openGL.c SL_main.c SL_user_task.c 

OBJECTS  = $(OBJS_COMMON) $(OBJS_MOTOR) $(OBJS_VISION) SL_parm_estimate.o SL_user_simulation.o SL_user_openGL.o SL_main.o SL_user_task.o 

ifeq ($(HOST),$(SARCOS_MASTER_HOST))
SOURCES += SL_rmain.c $(SRCS_RMOTOR) SL_user_rvision.c SL_user_rtask.c
OBJECTS += SL_rmain.o $(OBJS_RMOTOR) SL_user_rvision.o SL_user_rtask.o
endif

HEADERS = 

LIB_MOTOR     = -lSLmotor -lSLcommon -lutility $(COMM_LIBRARIES) -lcurses -lm 
LIB_VISION    = -lSLvision -lSLcommon -llwpr -lutility $(COMM_LIBRARIES) -lm

KeepUpToDateCopy( SL_kinematics.c, $(LAB_ROOT)/SL/src, $(SRCDIR))
KeepUpToDateCopy( SL_dynamics.c, $(LAB_ROOT)/SL/src, $(SRCDIR))
KeepUpToDateCopy( SL_forDynArt.c, $(LAB_ROOT)/SL/src, $(SRCDIR))
KeepUpToDateCopy( SL_forDynComp.c, $(LAB_ROOT)/SL/src, $(SRCDIR))
KeepUpToDateCopy( SL_invDynNE.c, $(LAB_ROOT)/SL/src, $(SRCDIR))
KeepUpToDateCopy( SL_invDynArt.c, $(LAB_ROOT)/SL/src, $(SRCDIR))
KeepUpToDateCopy( SL_parm_estimate.c, $(LAB_ROOT)/SL/src, $(SRCDIR))

ProgramListTarget( xmaster, $(OBJS_XMASTER), $(LIBS_XMASTER) )
ProgramListTarget( xpest, $(OBJS_XPEST), $(LIBS_XPEST) )
ProgramListTarget( xmotor, $(OBJS_COMMON) $(OBJS_MOTOR), $(LIB_MOTOR) )
ProgramListTarget( xvision, $(OBJS_COMMON) $(OBJS_VISION) , $(LIB_VISION) )

LibraryListAddTarget( master, $(OBJS_COMMON), )
LibraryListAddTarget( master_openGL, SL_user_openGL.o ,  )
LibraryListAddTarget( master_task, $(OBJS_TASK),  )
LibraryListAddTarget( master_simulation, SL_user_simulation.o ,  )

ifeq ($(HOST),$(SARCOS_MASTER_HOST))
ProgramListTarget( xrmaster, $(OBJS_XRMASTER), $(LIBS_XMASTER) )
ProgramListTarget( xrmotor, $(OBJS_COMMON) $(OBJS_RMOTOR), $(LIB_MOTOR) )
ProgramListTarget( xrvision, $(OBJS_COMMON) $(OBJS_RVISION) , $(LIB_VISION) )
LibraryListAddTarget( rmaster_task, $(OBJS_RTASK) ,  )
endif

NormalObjRule( $(OBJECTS) )
