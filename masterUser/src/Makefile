# Makefile generated by imake - do not edit!

#  Note that the LAB-Imake.tmpl file includes the LAB.cf file at this
#  point and that LAB-Imake.tmpl continues after this included file with
#  more defines.

SPARC = sparc

POWERPC = powerpc

I386 = i386

I586 = i586

I386MAC = i386mac

X86_64 = x86_64

X86_64 = x86_64mac

I486XENO = i486xeno

X86_64XENO = x86_64xeno

MY_BINDIR     =  $(PROG_ROOT)/bin
MY_INCLUDES   =  $(PROG_ROOT)/include
MY_LIBDIR     =  $(PROG_ROOT)/lib

MYBINDIR      =  $(MY_BINDIR)
MYINCLUDEPATH =  $(MY_INCLUDES)
MYLIBDIR      =  $(MY_LIBDIR)

DOCUMENTATIONDIR = doc

LAB             =   CLMC
LAB_BINDIR      =   $(LAB_ROOT)/bin
LAB_INCLUDES    =  -I$(LAB_ROOT)/include
LAB_LIBDIR      =  -L$(LAB_ROOT)/lib/$(MACHTYPE)

CLGROOT         =   $(LAB_ROOT)
CLGBINDIR       =   $(LAB_BINDIR)
CLGINCLUDEPATH  =   $(LAB_INCLUDES)
CLGLIBDIR       =   $(LAB_LIBDIR)

VXPROCS         =   ../2700  ../2400

MATLAB_ROOT     =   /usr/local/matlab
MATLAB_INCLUDES =  -I$(MATLAB_ROOT)/extern/include -I$(MATLAB_ROOT)/simulink/include
MATLAB_LIBDIR   =  -L$(MATLAB_ROOT)/bin/$(MATLAB_ARCH)

CROSSMACHTYPE   =   $(SPARC)

LDOGHOST        =  argus

XENOMAI_ROOT    = /usr/xenomai

SARCOS_MASTER_HOST = xenomai
SARCOS_SLAVE_HOST  = xenomai
SARCOS_PRIMUS_HOST = pechstein

ARM_HOST = mandy

HERMES_HOST = hermes

LBR4_HOST = pechstein

APOLLO_HOST = pechstein

#  The LAB-Imake.tmpl file resumes at this point.

              DOC = doxygen
            IMAKE = imake -D$(MACHTYPE)
               AR = ar cq
               CC = gcc
             CCPP = g++
            C40AR = ar30 -r
            C40CC = cl30
             VXAR = ar68k -r
             VXCC = cc68k
            PPCAR = arppc -r
            PPCCC = ccppc
            M332AR = 332ar -r
            M332CC = cc68k
              CPP = /lib/cpp
             YACC = /usr/bin/yacc
              LEX = /usr/bin/lex
          INSTALL = install
               LD = ld
             VXLD = ld68k
            PPCLD = ldppc
           M332LD = 332ld
             MAKE = make
               MV = mv
               CP = cp
           RANLIB = ranlib
               RM = rm -f
             TAGS = etags
               AS = as
              CAT = cat
            MKDIR = mkdir -p
           DEPEND = makedepend

    INSTDISTFLAGS = -m 0664
     INSTOBJFLAGS = -m 0755
     INSTBINFLAGS = -m 0755
     INSTLIBFLAGS = -m 0664
     INSTMANFLAGS = -m 0444
     INSTDATFLAGS = -m 0444
  INSTHEADERFLAGS = -m 0444
     INSTDOCFLAGS = -m 0444
  RANLIBINSTFLAGS =

  NORMAL_CC_FLAGS = -D$(MACHTYPE) -D$(LAB) -DUNIX -Wall -Wno-unused -Wno-strict-aliasing -Wno-write-strings -march=native -mtune=native
  NORMAL_CCPP_FLAGS = -D$(MACHTYPE) -D$(LAB) -DUNIX -Wall -Wno-unused -Wno-strict-aliasing -Wno-write-strings -march=native -mtune=native

  NORMAL_CC_FLAGS = -D$(MACHTYPE) -D$(LAB) -DUNIX -Wall -Wno-unused -Wno-strict-aliasing -Wno-write-strings -m64 -march=native -mtune=native -fPIC
  NORMAL_CCPP_FLAGS = -D$(MACHTYPE) -D$(LAB) -DUNIX -Wall -Wno-unused -Wno-strict-aliasing -Wno-write-strings -m64 -march=native -mtune=native -fPIC

    ANSI_CC_FLAGS = -ansi -pedantic -Wtrigraphs
   DEBUG_CC_FLAGS = -g
OPTIMIZE_CC_FLAGS = -O3  -mfpmath=sse -ffast-math -fprefetch-loop-arrays -funit-at-a-time -fomit-frame-pointer -fPIC
  MATLAB_CC_FLAGS = -DMATLAB_MEX_FILE -fPIC -D_GNU_SOURCE -pthread
    LINT_CC_FLAGS = -Wall -Wimplicit -Wreturn-type -Wunused -Wswitch 			-Wcomment -Wshadow -Wid-clash-31 -Wpointer-arith 			-Wcast-qual

  C40_NORMAL_CC_FLAGS = -x -v40 -mf -c -Dc40 -eo.o
   C40_OPTIMIZE_FLAGS = -o
   VX_NORMAL_CC_FLAGS = -D$(LAB) -DVX $(VX_NORMAL_INCLUDES)/h -fvolatile -W
 M332_NORMAL_CC_FLAGS = -mnobitfield -freg-struct-return -nostdinc -nostdlib -Wall -Wno-unused $(M332_NORMAL_INCLUDES)
  PPC_NORMAL_CC_FLAGS = -fno-builtin -fno-for-scope -nostdinc -D_GNU_TOOL -c -D$(LAB) -DVX $(PPC_NORMAL_INCLUDES) -Wall -Wno-unused
    VX_68040_CC_FLAGS = -DCPU=MC68040 -m68040
    VX_68020_CC_FLAGS = -mc68020 -m68881
        M332_CC_FLAGS = -mc68020 -DM332
    PPC_2400_CC_FLAGS = -DCPU=PPC604  -DMV2400
    PPC_2600_CC_FLAGS = -DCPU=PPC604  -DMV2600
    PPC_2700_CC_FLAGS = -DCPU=PPC604  -DMV2700
    VX_OPTIMIZE_FLAGS = -O2
   PPC_OPTIMIZE_FLAGS = -O2

 M322_NORMAL_INCLUDES = M322NormalIncludes
   VX_NORMAL_INCLUDES = -I$(VX_VW_BASE)/h
  PPC_NORMAL_INCLUDES = -I$(WIND_BASE)/target/h

   LDCOMBINEFLAGS = -X -r

      SYS_LDFLAGS = -L/usr/X11/lib64 -L/usr/X11/lib $(SYS_LIBDIR)

      LAB_LDFLAGS =  $(LAB_LIBDIR)
   MATLAB_LDFLAGS = MatlabLdFlags $(MATLAB_LIBDIR)
    LAB_VXLDFLAGS =  $(LAB_VXLIBDIR)
     PROJ_LDFLAGS =  $(PROJ_LIBDIR)
     PROJ_VXLDFLAGS =  $(PROJ_VXLIBDIR)

      LAB_DEFINES =
     PROJ_DEFINES =
    IMAKE_DEFINES = -TLAB_Imake.tmpl
DIRECTORY_DEFINES =

    PROJ_IMAKEDIR = $(LAB_ROOT)/config
     LAB_IMAKEDIR = $(LAB_ROOT)/config

    SYS_LIBRARIES = -lpthread -lrt -lreadline -lcurses
    LAB_LIBRARIES =
   PROJ_LIBRARIES =
 OPENGL_LIBRARIES = -lglut -lGL -lGLU -lX11 -lXmu
 MATLAB_LIBRARIES = -L$(MATLAB_ROOT)/bin/$(MATLAB_ARCH) -lmx -lmex -lmat -lm
     SYS_INCLUDES =
   COMM_LIBRARIES = -lnsl

      ALLINCLUDES = $(INCLUDES) $(PROJ_INCLUDES) $(LAB_INCLUDES) $(SYS_INCLUDES)
       ALLDEFINES = $(DEFINES) $(DIRECTORY_DEFINES) $(PROJ_DEFINES) 			$(LAB_DEFINES) $(ALLINCLUDES)

       ALLLDFLAGS = $(LDFLAGS) $(PROJ_LDFLAGS) $(LAB_LDFLAGS) $(SYS_LDFLAGS)
     ALLVXLDFLAGS = $(LDFLAGS) $(PROJ_VXLDFLAGS) $(LAB_VXLDFLAGS) $(SYS_LDFLAGS)
     ALLLIBRARIES = $(LIBRARIES) $(PROJ_LIBRARIES) $(LAB_LIBRARIES) 			$(SYS_LIBRARIES)

        CPP_FLAGS = $(ALLDEFINES)
    DEPENDDEFINES =
 GCCDEPENDDEFINES = -MD -MP -MF $*.d

        IMAKE_CMD = $(IMAKE) -I$(PROJ_IMAKEDIR) $(IMAKE_DEFINES) $(DIRECTORY_DEFINES)
           RM_CMD = find . \( -name "*.CKP" -or -name "*.ln" -or -name "*.BAK" -or -name "*.bak" -or -name "*.o" -or -name "*.d" -or -name "core" -or -name "errs" -or -name ",*" -or -name "*~" -or -name "*.a" -or -name ".emacs_*" -or -name "TAGS" -or -name "make.log" -or -name "MakeOut" -or -name "*.68k" -or -name "*.ppc" -or -name "*.x40" -or -name "*.map" \) -exec rm {} \;

             ARCH = `arch`

#  $RCSfile: CED-Imake.rules,v $
#  $Revision: 1.19 $
#  $Author: bryant $, $State: Exp $, $Locker: bryant $
#  Program : All programs at the CED.
#  Project : All projects at the CED.

#  Imake rules for generating programs and libraries.
#  These rules are specific to the Center for Engineering Design

#  This is the beginning of the Imakefile produced makefile.
#  The header information below identifies the Imakefile and
#  version of this particular makefile.

HEADERDIR              = $(MYINCLUDEPATH)
ifeq ($(MACHTYPE),$(CROSSMACHTYPE))
SUBDIRS                = ../$(MACHTYPE) $(VXPROCS)
else
SUBDIRS                = ../$(MACHTYPE)
endif

all::

#
#  These rules are common to all makefiles and SHOULD NOT BE EDITTED.
#

emptyrule::

clean::
	if [ $(notdir $(PWD)) = $(MACHTYPE) ]; then \
	   $(RM_CMD); \
	elif [ $(notdir $(PWD)) = "src" ]; then \
	   $(RM_CMD); \
	else \
	   $(RM) *.CKP *.ln *.BAK *.bak *.o core errs ,* *~ *.a .emacs_* TAGS make.log MakeOut *.68k *.ppc *.x40 *.map; \
	fi

Makefile:: Imakefile $(LAB_IMAKEDIR)/LAB.cf $(LAB_IMAKEDIR)/LAB_Imake.tmpl $(LAB_IMAKEDIR)/LAB_Imake.rules
	-@if [ -f Makefile ]; then \
		$(RM) Makefile.bak; $(MV) Makefile Makefile.bak; \
	else \
	exit 0; \
	fi
	$(IMAKE_CMD)
	@echo "Makefile in `pwd` has been updated."

header::
	@echo "Distribution of headers complete in `pwd`."

#
#  Rules for all makefiles that have subdirectory lists.
#

install::
	@case '${MFLAGS}' in *[ik]*) set +e;; esac; \
	for i in $(SUBDIRS) ; \
	do \
		if [ ! "$$i" = "../$(SPARC)" ]; then \
		( if [ ! -d $$i ]; then \
		     ( $(MKDIR) $$i; \
		     echo "Created " $$i; \
		     cd $$i;            \
		     if [ `uname -a | grep -c ipipe` = 1 ]; then \
		       if [ -f ../makefiles/imakefile.xeno ]; then \
		         ln -s ../makefiles/imakefile.xeno Imakefile;\
		       else \
		         ln -s "../makefiles/imakefile.unix" Imakefile;\
		       fi; \
		     else \
		       ln -s "../makefiles/imakefile.unix" Imakefile;\
		     fi; \
		     $(IMAKE_CMD) imakeflags );\
		  else \
		     cd $$i;\
		  fi; \
		  echo "Install" "in `pwd` begun..."; \
		   $(MAKE) $(MFLAGS)  install); \
		else \
		     echo " --- Skipping sparc directory ---"; \
		fi \
	done

doc::
	@case '${MFLAGS}' in *[ik]*) set +e;; esac; \
	for i in $(SUBDIRS) ; \
	do \
		if [ ! "$$i" = "../$(SPARC)" ]; then \
		( if [ ! -d $$i ]; then \
		     ( $(MKDIR) $$i; \
		     echo "Created " $$i; \
		     cd $$i;            \
		     if [ `uname -a | grep -c ipipe` = 1 ]; then \
		       if [ -f ../makefiles/imakefile.xeno ]; then \
		         ln -s ../makefiles/imakefile.xeno Imakefile;\
		       else \
		         ln -s "../makefiles/imakefile.unix" Imakefile;\
		       fi; \
		     else \
		       ln -s "../makefiles/imakefile.unix" Imakefile;\
		     fi; \
		     $(IMAKE_CMD) imakeflags );\
		  else \
		     cd $$i;\
		  fi; \
		  echo "Documentation in" "in `pwd` begun..."; \
		   $(MAKE) $(MFLAGS)  doc); \
		else \
		     echo " --- Skipping sparc directory ---"; \
		fi \
	done

clean::
	@case '${MFLAGS}' in *[ik]*) set +e;; esac; \
	for i in $(SUBDIRS) ; \
	do \
		if [ ! "$$i" = "../$(SPARC)" ]; then \
		( if [ ! -d $$i ]; then \
		     ( $(MKDIR) $$i; \
		     echo "Created " $$i; \
		     cd $$i;            \
		     if [ `uname -a | grep -c ipipe` = 1 ]; then \
		       if [ -f ../makefiles/imakefile.xeno ]; then \
		         ln -s ../makefiles/imakefile.xeno Imakefile;\
		       else \
		         ln -s "../makefiles/imakefile.unix" Imakefile;\
		       fi; \
		     else \
		       ln -s "../makefiles/imakefile.unix" Imakefile;\
		     fi; \
		     $(IMAKE_CMD) imakeflags );\
		  else \
		     cd $$i;\
		  fi; \
		  echo "Clean" "in `pwd` begun..."; \
		   $(MAKE) $(MFLAGS)  clean); \
		else \
		     echo " --- Skipping sparc directory ---"; \
		fi \
	done

distclean::
	@case '${MFLAGS}' in *[ik]*) set +e;; esac; \
	for i in $(SUBDIRS) ; \
	do \
		if [ ! "$$i" = "../$(SPARC)" ]; then \
		( if [ ! -d $$i ]; then \
		     ( $(MKDIR) $$i; \
		     echo "Created " $$i; \
		     cd $$i;            \
		     if [ `uname -a | grep -c ipipe` = 1 ]; then \
		       if [ -f ../makefiles/imakefile.xeno ]; then \
		         ln -s ../makefiles/imakefile.xeno Imakefile;\
		       else \
		         ln -s "../makefiles/imakefile.unix" Imakefile;\
		       fi; \
		     else \
		       ln -s "../makefiles/imakefile.unix" Imakefile;\
		     fi; \
		     $(IMAKE_CMD) imakeflags );\
		  else \
		     cd $$i;\
		  fi; \
		  echo "Distribution clean" "in `pwd` begun..."; \
		   $(MAKE) $(MFLAGS)  distclean); \
		else \
		     echo " --- Skipping sparc directory ---"; \
		fi \
	done

Makefiles::
	@case '${MFLAGS}' in *[ik]*) set +e;; esac; \
	for i in $(SUBDIRS) ;\
	do \
		echo "Making Makefiles in `pwd`/$$i..."; \
		if [ -f $$i/Makefile ]; then \
			(cd $$i; $(MAKE) $(MFLAGS) PROJ_IMAKEDIR=$(PROJ_IMAKEDIR) LAB_IMAKEDIR=$(LAB_IMAKEDIR) Makefile; $(MAKE) $(MFLAGS) PROJ_IMAKEDIR=$(PROJ_IMAKEDIR) LAB_IMAKEDIR=$(LAB_IMAKEDIR) Makefiles) ; \
		fi; \
	done

all::
	@case '${MFLAGS}' in *[ik]*) set +e;; esac; \
	for i in $(SUBDIRS) ; \
	do \
		if [ ! "$$i" = "../$(SPARC)" ]; then \
		( if [ ! -d $$i ]; then \
		     ( $(MKDIR) $$i; \
		     echo "Created " $$i; \
		     cd $$i;            \
		     if [ `uname -a | grep -c ipipe` = 1 ]; then \
		       if [ -f ../makefiles/imakefile.xeno ]; then \
		         ln -s ../makefiles/imakefile.xeno Imakefile;\
		       else \
		         ln -s "../makefiles/imakefile.unix" Imakefile;\
		       fi; \
		     else \
		       ln -s "../makefiles/imakefile.unix" Imakefile;\
		     fi; \
		     $(IMAKE_CMD) imakeflags );\
		  else \
		     cd $$i;\
		  fi; \
		  echo "Make" all "in `pwd` begun..."; \
		   $(MAKE) $(MFLAGS)  all); \
		else \
		     echo " --- Skipping sparc directory ---"; \
		fi \
	done

headers:: header
	@case '${MFLAGS}' in *[ik]*) set +e;; esac; \
	for d in $(SUBDIRS) ;\
	do \
		if [ -f $$d/Makefile ]; then \
		(cd $$d ; $(MAKE) $(MFLAGS) headers) ; \
		fi; \
	done

#
#  Dependencies generated by makedepend.
#

