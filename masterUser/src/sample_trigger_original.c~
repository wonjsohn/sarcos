/*============================================================================
==============================================================================
                      
                            sample_trigger.c
  
==============================================================================
Remarks:
 
    Generates an analoge pulse out of the physical oscilloscope for
    sincronization purposes
 
============================================================================*/
 
// system headers
#include "SL_system_headers.h"
 
// SL includes
#include "SL.h"
#include "SL_user.h"
#include "SL_tasks.h"
#include "SL_task_servo.h"
#include "SL_kinematics.h"
#include "SL_dynamics.h"
#include "SL_collect_data.h"
#include "SL_shared_memory.h"
#include "SL_man.h"
#include "SL_oscilloscope.h" //Oscilloscope library (physical and virtual)
#include <stdlib.h>
#include <stdio.h>
#include <time.h>
 
// defines
 
// local variables
static double start_time = 0.0;
static double emgTrig = 0.0;
//static int dataFlag;
static SL_DJstate  target[N_DOFS+1];
static double this_time = 0.00, last_time = 0.00, mov_time = 0.00, some_time = 0.00;
static double start_elbow_angle = 1.571; //1.571rad = 90deg
static int direction = 0, udFlag = 0;
static int ivar = 0;
 
// global functions
 
// local functions
static int  init_sample_trigger(void);
static int  run_sample_trigger(void);
static int  change_sample_trigger(void);
 
 
/*****************************************************************************
******************************************************************************
Function Name    : add_sample_trigger
Date     : June 2014
Remarks:
 
adds the task to the task menu
 
******************************************************************************
Paramters:  (i/o = input/output)
 
none
 
*****************************************************************************/
void
add_sample_trigger( void )
 
{
  int i, j;
  
  addTask("Sample Trigger", init_sample_trigger,
       run_sample_trigger, change_sample_trigger);
 
}   
 
/*****************************************************************************
******************************************************************************
  Function Name    : init_sample_trigger
  Date       : June 2014
 
  Remarks:
 
  initialization for task
 
******************************************************************************
  Paramters:  (i/o = input/output)
 
    none
 
 *****************************************************************************/
static int
init_sample_trigger(void)
{
  int j, i;
  int ans;
  char string[100];
 
  // prepare going to the default posture
  bzero((char *)&(target[1]),N_DOFS*sizeof(target[1]));
  for (i=1; i<=N_DOFS; i++)
    target[i] = joint_default_state[i];
 
  // go to the target using inverse dynamics (ID)
  if (!go_target_wait_ID(target))
    return FALSE;
 
  // add trigger to data collection
  sprintf(string,"emgTrig");
  addVarToCollect((char *)&(emgTrig),string,"V", DOUBLE,TRUE);
 
  /* add trigger signal to virtual oscilloscope:    
  add the variable name to prog/masterUser/prefs/task_default.osc*/
  updateOscVars();
 
  // ready to go
  ans = 999;
  while (ans == 999) {
    if (!get_int("Enter 1 to start or anthing else to abort ...",ans,&ans))
    return FALSE;
  }
 
  // only go when user really types the right thing
  if (ans != 1)
    return FALSE;
 
  start_time = task_servo_time;
  printf("start time = %.3f, task_servo_time = %.3f\n",
     start_time, task_servo_time);
 
  // start data collection
  scd();
  printf("Data collection started\n");
 
  return TRUE;
}
 
/*****************************************************************************
******************************************************************************
  Function Name    : run_sample_trigger
  Date       : June 2014
 
  Remarks:
 
  run the task from the task servo: REAL TIME requirements!
 
******************************************************************************
  Paramters:  (i/o = input/output)
 
  none
 
 *****************************************************************************/
static int
run_sample_trigger(void)
{
  static int firsttime = TRUE;
  int j, i, dof;
  double task_time;
  double wait_time = 1;
  double def_elbow_angle = 1.571; //1.571rad = 90deg
  double shift = 0.2; //time shift for position
  double perturbAmp = 0.5236; //0.3491rad = 20deg | 0.5236 = 30deg
  double b = 31.9; // 43.8 for perturbAmp = 20deg | 31.9 for perturbAmp = 30deg;
 
  // Task parameters
  task_time = task_servo_time - start_time;
 

  // osciallates one DOF
  dof = 4; // degree of freedom to rotate
  for (i=dof; i<=dof; ++i)
  {
    if (ivar == 1)
    {
        if (firsttime == TRUE)
        {
            direction = -1;
            firsttime = FALSE;
        }
            if (this_time >= wait_time)
        {
            direction = -direction;
            //start_elbow_angle = joint_state[i].th;
            last_time = task_time;
            some_time = task_time;
            if (direction > 0) //up
            {
		start_elbow_angle = joint_default_state[i].th;
                setOsc(d2a_cr,75.00);
                emgTrig = 5.0;
            }
            else //down
            {
		start_elbow_angle = perturbAmp + joint_default_state[i].th;
                setOsc(d2a_cr,50.00);
                emgTrig = 0.0;
                ivar = 0;
            }
        }
    }
 
        this_time = task_time - last_time;
        mov_time = task_time - some_time;
 
        target[i].th = start_elbow_angle + direction*perturbAmp/(1 + exp(-b*(mov_time-shift)));
        target[i].thd = direction*perturbAmp*b*exp(-b*(mov_time-shift))/pow(1+exp(-b*(mov_time-shift)), 2);
        target[i].thdd = direction*perturbAmp*(pow(b,2)*exp(-b*(mov_time-shift))/pow(1+exp(-b*(mov_time-shift)),2))*(2*exp(-b*(mov_time-shift))/(1+exp(-b*(mov_time-shift)))-1);


	
  }
 
 // the following variables need to be assigned
  for (i=1; i<=N_DOFS; ++i)
  {
    joint_des_state[i].th   = joint_des_state[i].th 
    joint_des_state[i].thd  = joint_des_state[i].thd
    joint_des_state[i].thdd = joint_des_state[i].thdd
    joint_des_state[i].uff  = 0.0;
  }
 
  // compute inverse dynamics torques
  SL_InvDynNE(joint_state,joint_des_state,endeff,&base_state,&base_orient);
 
  return TRUE;
}
 
/*****************************************************************************
******************************************************************************
  Function Name    : change_sample_trigger
  Date       : June 2014
 
  Remarks:
 
  changes the task parameters
 
******************************************************************************
  Paramters:  (i/o = input/output)
 
  none
 
 *****************************************************************************/
static int
change_sample_trigger(void)
{
 
  //double dvar;
 
  get_int("Enter 1 to perturb elbow:",ivar,&ivar);
  //printf("Input var = %i\n",ivar);
  //get_double("This is how to enter a double variable",dvar,&dvar);
 
  return TRUE;
 
}
